generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  firstName     String
  lastName      String
  email         String          @unique
  phone         String
  address       String?
  city          String?
  district      String?
  password      String
  role          Role            @default(CITIZEN)
  agencyId      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  responses     AdminResponse[] @relation("AdminToResponse")
  notifications Notification[]
  submissions   Submission[]
  agency        Agency?         @relation(fields: [agencyId], references: [id])
}

model Agency {
  id          String       @id @default(uuid())
  name        String
  description String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categories  Category[]
  submissions Submission[]
  users       User[]
}

model Category {
  id          String       @id @default(uuid())
  name        String
  agencyId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  agency      Agency       @relation(fields: [agencyId], references: [id])
  submissions Submission[]
}

model Submission {
  id            String          @id @default(uuid())
  userId        String
  categoryId    String
  agencyId      String
  title         String
  description   String
  type          SubmissionType  @default(COMPLAINT)
  status        Status          @default(OPEN)
  location      String?
  attachmentUrl String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  responses     AdminResponse[]
  notifications Notification[]
  agency        Agency          @relation(fields: [agencyId], references: [id])
  category      Category        @relation(fields: [categoryId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
}

model AdminResponse {
  id           String     @id @default(uuid())
  submissionId String
  responderId  String
  message      String
  createdAt    DateTime   @default(now())
  responder    User       @relation("AdminToResponse", fields: [responderId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id])
}

model Notification {
  id           String           @id @default(uuid())
  userId       String
  message      String
  isRead       Boolean          @default(false)
  type         NotificationType @default(SYSTEM)
  submissionId String?
  createdAt    DateTime         @default(now())
  submission   Submission?      @relation(fields: [submissionId], references: [id])
  user         User             @relation(fields: [userId], references: [id])
}

enum Role {
  CITIZEN
  ADMIN
  AGENCY_STAFF
}

enum SubmissionType {
  COMPLAINT
  FEEDBACK
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum NotificationType {
  SYSTEM
  SUBMISSION_UPDATE
  ADMIN_RESPONSE
}
